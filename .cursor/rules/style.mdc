---
alwaysApply: true
---

# Java-Specific Patterns
- Prioritize **simplicity** and **readability** above all else. Do not trade readability for memory or performance efficiency, such as using Bitmask.
- Use **Modern and Latest Java syntax available**. Some examples are:
  - Use HashMap operations like `merge`, `computeIfPresent`, `computeIfAbsent` etc.
  - **Modern Collection Operations**: Use `.toList()`, `.toSet()`, `.toMap()` instead of `.collect(Collectors.toList())`, etc.
  - **Local Variable Type Inference**: Use `var` for local variables when the type is obvious from context
  - **Enhanced Switch**: Use switch expressions with `->` syntax instead of traditional switch statements
  - **Text Blocks**: Use `"""` text blocks for multi-line strings
  - **Pattern Matching**: Use pattern matching for `instanceof` when available (Java 16+)
  - **Collection Factory Methods**: Use `List.of()`, `Set.of()`, `Map.of()` for immutable collections
- Chain operations using stream: prefer `.stream()` for multiple transformations
- If applicable, use functional combinators: map, filter, flatMap, reduce, max, min, sum, findFirst, findAny, anyMatch, allMatch, etc., over imperative loops with continue and break statements
- Don't use functional programming if it hurts readability and adds cognitive complexity.
- Refer these Java files for Functional programming style guide for Java:
  - ds-algo/src/main/java/practice/ParallelCourses.java
  - ds-algo/src/main/java/practice/DetonateTheMaximumBombs.java
  - ds-algo/src/main/java/practice/SurroundedRegions.java
  - ds-algo/src/main/java/practice/FindTheSafestPathInGrid.java
