package educative.graph.unionfind

/* 11 Sep 2024 21:56 */

fun nodeToRemoveToMinimizeMalwareSpread(adjMatrix: Array<IntArray>, initial: Set<Int>): Int {
  val unionFind = UnionFind4(adjMatrix)
  val infectedCount = initial.groupingBy(unionFind::find).eachCount()
  return initial.filter { infectedCount[unionFind.find(it)] == 1 }.maxByOrNull(unionFind::rootRank)!!
}

private class UnionFind4(adjMatrix: Array<IntArray>) {
  val roots = Array(adjMatrix.size) { it }
  val ranks = Array(adjMatrix.size) { 0 }

  init {
    adjMatrix.indices.asSequence()
      .flatMap { row -> adjMatrix[0].indices.map { col -> row to col }  }
      .filter { (row, col) -> adjMatrix[row][col] == 1 }
      .forEach { (row, col) -> union(row, col) }
  }
  
  tailrec fun find(n: Int): Int = when {
    roots[n] == n -> n
    else -> find(roots[n])
  }
  
  fun union(n1: Int, n2: Int) {
    val root1 = find(n1)
    val root2 = find(n2)
    when {
      ranks[root1] < ranks[root2] -> roots[n1] = root2
      ranks[root1] > ranks[root2] -> roots[n2] = root1
      else -> {
        roots[root1] = root2
        ranks[root2]++
      }
    }
  }
  
  fun rootRank(n: Int): Int = ranks[find(n)]
}
